<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=EB+Garamond:ital,wght@0,400;0,700;1,400&family=Kanit:wght@700&display=swap');
    </style>
    <link
            rel="stylesheet"
            href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
            integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2"
            crossorigin="anonymous"
    />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js" defer></script>
    <link rel="stylesheet" href="../public/assets/style_documentation.css" />

    <title>Happy Blog Documentation</title>
</head>
<body>

<div class="container-md">
    <div class="row item">
        <div class="col-6 text">
            <p>
                When accessing the website – your own personal blog – the first thing you see is the welcome page.
                There you are greeted with a message and a button that would bring you to an overview of all your blog
                entries. But there is also an index to the left from where you could go to particular blog entries
                directly. Above all that is a bar containing your blog’s name and buttons for editing and adding blog
                entries as well as the button that brought you here – to the documentation of the website.
                While there was still no particular article selected the edit button will not respond whereas the add
                entry button can be called from any point in the website.
                On the right you can see the chat which will be explained in detail later.
            </p>
        </div>
        <div class="col-6 align-self-center">
            <img class="image" src="../public/resources/docu_welcome.png">
        </div>

    </div>

    <div class="row item">
        <div class="col-6 text">
            <p>
                After pressing the “show entries” button you get to the homepage – a place where all your public
                entries are listed chronologically. You get to read their title and short description. If you want to
                read further into a certain entry there is a button for each one that brings you to the whole text.
            </p>
        </div>
        <div class="col-6 align-self-center">
            <img class="image" src="../public/resources/">
        </div>

    </div>

    <div class="row item">
        <div class="col-6 text">
            <p>
                Once you chose an entry to read more about you will reach this screen. In addition to the information
                you get from the homepage you can also see the full text of the article as well as any pictures that
                may be uploaded. Underneath the title you have two buttons – one for getting back to the homepage and
                one for deleting the current entry. Now the edit button will also be activated so you can edit the
                entry you’re just reading. You may also have noticed that the index popped open to facilitate reading
                through the blog without the need to get back to the homepage every time.
            </p>
        </div>
        <div class="col-6 align-self-center">
            <img class="image" src="../public/resources/docu_entry.png">
        </div>

    </div>

    <div class="row item">
        <div class="col-6 text">
            <p>
                This is the index. You can reach it from every page of your blog by just clicking on it. It separates
                the articles into public (left) and private (right) entries which can be reached through the according
                button on top of the entry list. If you chose an article from this list you will reach the same page
                you’re just seeing for the article selected.
            </p>
        </div>
        <div class="col-6 align-self-center">
            <img class="image" src="../public/resources/docu_index.png">
        </div>

    </div>

    <div class="row item">
        <div class="col-6 text">
            <p>
                Here you can see the main view when editing an entry. Everything that was there before will be
                automatically added to the corresponding field so you don’t have to rewrite the whole article.
                Underneath you can find the option to upload images. You can either select them by browsing through
                your files or you can just drag & drop them. After uploading you can see them added to the file list
                where you also have the option to delete the uploaded files. You also have the option to draw images
                on your own. On the bottom you can see buttons to save your changes or to cancel the editing process.
                This view will also be presented when you choose to add a new entry. Everything is the same except
                that all fields will be empty.
            </p>
        </div>
        <div class="col-6 align-self-center">
            <img class="image" src="../public/resources/docu_editentry.png">
        </div>

    </div>

    <div class="row item">
        <div class="col-6 text">
            <p>
                Here you can see what it looks like when you write something in the chat. Before you can do that
                though you are asked to choose a username which will stay the same while you’re on the blog. After
                that you can write messages and everybody that is currently on your blog will receive them. And even
                users who join later will receive the last 20 messages that were in the chat. Other users can also
                participate in the chat the same way that you can.
            </p>
        </div>
        <div class="col-6 align-self-center">
            <img class="image" src="../public/resources/docu_chat.png">
        </div>

    </div>


    <div class="row item">
        <div class="col-6 text">
            <p>
                After initializing the application server on port 5000 a WebSocket server is created and bond to that server. It is specified that on the establishment of a new connection the chatlog is send to new client. Logging a message takes places with a global server variable being an array of Strings. If this array has less than 20 entries the new message is just pushed to the end. If it has reached a size of 20 the first message of it is deleted and all other messages are shifted to make room in the 20th index for the new chat message. On reception of a new message the message is added to the log and forwarded to every other connected client.
            </p>
        </div>
        <div class="col-6 align-self-center">
            <img class="image" src="../public/resources/docu_websocketserver.png">
        </div>

    </div>

    <div class="row item">
        <div class="col-6 text">
            <p>
                In HTML the chat is represented as a column of size 2 using bootstrap. Inside this column there is the message box followed by a text area followed by a button. Depending on the state of the program either the message box and the send button are displayed or the username box and the confirm button. When accessing the website the first time the latter two are displayed.
            </p>
        </div>
        <div class="col-6 align-self-center">
            <img class="image" src="../public/resources/docu_websockethtmlk.png">
        </div>

    </div>

    <div class="row item">
        <div class="col-6 text">
            <p>
                On the client side the main part of the work is done by the WebSocket controller which is created the first time the page is loaded. At first all relevant HTML objects get retrieved to be manipulated later. Then this function is being called. At first it opens a connection to the server on the same port as the application is running. Then the behaviour for different states is defined. On opening there is just a log message. On reception of a message the data being transmitted is passed onto a function in the view component of the WebSocket to display it together with the information that the message to display is of external nature. On closing the variable for storing the WebSocket is reset. Then event listeners for the previously explained buttons are added. The confirm button simply stops displaying itself and the username box to make room for the send button and the new message box. The send button first checks if there is a WebSocket connection. If not this is shown inside the chat. If it is and the there is some actual text inside the new message box the message to display is composed of the username that was previously entered and the new message. This is then send via the WebSocket to the server and also send to the view component together with the information that this time the message is of internal nature.
            </p>
        </div>
        <div class="col-6 align-self-center">
            <img class="image" src="../public/resources/docu_websocketcontroller.png">
        </div>

    </div>

    <div class="row item">
        <div class="col-6 text">
            <p>
                The WebSocketView component is responsible for altering the content of the chat box upon new messages. At first the relevant HTML objects are retrieved. Then when a new message is created or received the showMessage function gets called. Depending on the origin of the message the alignment inside the box the background colour of the message and the border of the message are determined. Then the message gets wrapped in some HTML code to be added to the chat HTML object. Afterwards it is auto-scrolled to the bottom of the chat box and the content of the new message box is deleted.
            </p>
        </div>
        <div class="col-6 align-self-center">
            <img class="image" src="../public/resources/docu_websocketview.png">
        </div>

    </div>
    <hr>

</div>

</body>
</html>
